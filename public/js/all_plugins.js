/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/all_plugins.js":
/*!*************************************!*\
  !*** ./resources/js/all_plugins.js ***!
  \*************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nif (!RTE_DefaultConfig.svgCode_html2pdf) {\n  RTE_DefaultConfig.svgCode_html2pdf = '<svg viewBox=\"-2 -2 36 36\" fill=\"#5F6368\"><polygon points=\"30 11 30 9 22 9 22 23 24 23 24 17 29 17 29 15 24 15 24 11 30 11\"></polygon><path d=\"M8,9H2V23H4V18H8a2,2,0,0,0,2-2V11A2,2,0,0,0,8,9Zm0,7H4V11H8Z\"></path><path d=\"M16,23H12V9h4a4,4,0,0,1,4,4v6A4,4,0,0,1,16,23Zm-2-2h2a2,2,0,0,0,2-2V13a2,2,0,0,0-2-2H14Z\"></path><title>PDF</title></svg>';\n}\n\nRTE_DefaultConfig.plugin_html2pdf = RTE_Plugin_Html2PDF;\n\nfunction RTE_Plugin_Html2PDF() {\n  var scripturl = \"https://raw.githack.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js\";\n  var obj = this;\n  var config, editor;\n  obj.PluginName = \"Html2PDF\";\n\n  obj.InitConfig = function (argconfig) {\n    config = argconfig;\n  };\n\n  obj.InitEditor = function (argeditor) {\n    editor = argeditor;\n    editor.attachEvent(\"exec_command_html2pdf\", function (state, cmd, value) {\n      console.log(state, cmd, value);\n      obj.DoHtml2PDF();\n      state.returnValue = true;\n    });\n\n    editor.toolbarFactoryMap[\"html2pdf\"] = function (cmd) {\n      //console.log(cmd);\n      var span = editor.createToolbarButton(cmd);\n      span.style.backgroundColor = '';\n      return span;\n    };\n  };\n\n  function __Append(parent, tagname, csstext, cssclass) {\n    var tag = parent.ownerDocument.createElement(tagname);\n    if (csstext) tag.style.cssText = csstext;\n    if (cssclass) tag.className = cssclass;\n    parent.appendChild(tag);\n    return tag;\n  }\n\n  function dataURLToBlob(dataurl) {\n    var arr = dataurl.split(',');\n    var mime = arr[0].match(/:(.*?);/)[1];\n    var bstr = atob(arr[1]);\n    var n = bstr.length;\n    var u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new Blob([u8arr], {\n      type: mime\n    });\n  }\n\n  obj.DoHtml2PDF = function () {\n    var dialoginner = editor.createDialog(\"Html2PDF\", \"rte-dialog-html2pdf\");\n\n    var div2 = __Append(dialoginner, \"div\", \"position:relative;text-align:center;\");\n\n    div2.innerHTML = \"Loading...\";\n\n    var imgrect = __Append(dialoginner, \"div\", \"position:relative;text-align:center;\");\n\n    window.html2pdf_callback = function (win) {\n      if (!win.html2pdf) {\n        div2.innerHTML = \"Failed to load script.\";\n        return;\n      }\n\n      div2.innerHTML = \"Exporting...\";\n      var opt = {\n        margin: 0.5,\n        filename: 'myfile.pdf',\n        image: {\n          type: 'jpeg',\n          quality: 0.98\n        },\n        html2canvas: {\n          scale: 2\n        },\n        jsPDF: {\n          unit: 'in',\n          format: 'letter',\n          orientation: 'portrait'\n        }\n      };\n      var promimg = win.html2pdf().set(opt).from(win.document.body).outputImg();\n      promimg.then(function (img) {\n        var dataurl = img.getAttribute('src');\n\n        if (dataurl.indexOf(\"base64\") == -1) {\n          div2.innerHTML = \"Error, no data.\";\n          return;\n        }\n\n        var imgblob = dataURLToBlob(dataurl);\n        console.log(imgblob);\n        var imgurl = URL.createObjectURL(imgblob);\n        img.setAttribute(\"src\", imgurl);\n        var prom = win.html2pdf().set(opt).from(win.document.body).outputPdf();\n        prom.then(function (str) {\n          console.log(\"done\", str.length);\n          var bin = new Array(str.length);\n\n          for (var i = 0; i < str.length; i++) {\n            bin[i] = str.charCodeAt(i);\n          }\n\n          var blob = new Blob([new Uint8Array(bin)], {\n            type: \"application/pdf\"\n          });\n          var url = URL.createObjectURL(blob);\n          div2.innerHTML = Math.ceil(str.length / 1024) + \"KB Exported<br/><a href='\" + url + \"' target=_blank>Download PDF</a>\";\n          var pdflink = div2.querySelector(\"a\");\n          var date = new Date();\n          var ymd = String(date.getFullYear() * 10000 + (date.getMonth() + 1) * 100 + date.getDate()).substring(2);\n          var hms = String(1000000 + date.getHours() * 10000 + date.getMinutes() * 100 + date.getSeconds()).substring(1);\n          pdflink.download = \"Export-\" + ymd + \"-\" + hms + \".pdf\"; //a.rel = 'noopener'\n\n          pdflink.click();\n          img.style.cssText = \"max-width:300px;max-height:200px;margin:5px;padding:10px;border:solid 1px #eee;box-shadow:2px 2px 6px #eee\";\n          imgrect.appendChild(img);\n\n          __Append(imgrect, \"br\");\n\n          var imglink = __Append(imgrect, \"a\");\n\n          imglink.setAttribute(\"href\", imgurl);\n          imglink.setAttribute(\"target\", \"_blank\");\n          imglink.download = \"Export-\" + ymd + \"-\" + hms + \".jpg\";\n          imglink.innerText = \"Download Img\"; //dialoginner.close();\n        })[\"catch\"](function (x) {\n          console.error(x);\n        });\n      })[\"catch\"](function (x) {\n        console.error(x);\n      });\n    };\n\n    var div1 = __Append(dialoginner, \"div\", \"position:relative;text-align:center;\");\n\n    iframe = __Append(div1, \"iframe\", \"align-self:center;flex:99;width:100%;height:0px;border:0px;\", \"rte-editable\");\n    iframe.contentDocument.open(\"text/html\");\n    iframe.contentDocument.write(\"<html><head><link id='url-css-preview' rel='stylesheet' href='\" + editor.htmlEncode(config.previewCssUrl) + \"'/>\" + \"<script src='\" + editor.htmlEncode(scripturl) + \"'></script></head><body style='padding:10px;margin:0px'>\" + editor.getHTMLCode() + \"</body>\" + \"<script>window.onload=function(){setTimeout(function(){parent.html2pdf_callback(window)},100)}</script></html>\");\n    iframe.contentDocument.close();\n  };\n}\n\nif (!RTE_DefaultConfig.svgCode_imageeditor) {\n  RTE_DefaultConfig.svgCode_imageeditor = '<svg viewBox=\"-2 -2 20 20\" fill=\"#5F6368\"><style>.st0{fill:#f6f6f6}.st1{fill:#424242}.st2{fill:none}.st3{fill:#f0eff1}</style><path class=\"st0\" d=\"M1 0v6H0v10h10v-1h6V0z\" id=\"outline\"/><g id=\"icon_x5F_bg\"><path class=\"st1\" d=\"M2 5h1v1H2zM2 3h1v1H2zM2 1h1v1H2zM4 1h1.001v1H4zM6 1h1v1H6zM8 1h1v1H8zM10 1h1v1h-1zM12 1h1v1h-1zM14 1h1v1h-1zM14 3h1v1h-1zM14 5h1v1h-1zM14 7h1v1h-1zM14 9h1v1h-1zM14 10.999h1V12h-1zM14 13h1v1h-1zM12 13h1v1h-1zM11 11V5H5v1H4V4h8v7z\"/><circle class=\"st1\" cx=\"6.192\" cy=\"9.807\" r=\".807\"/><path class=\"st1\" d=\"M1 7v8h8V7H1zm1 7.001v-.28l2.537-1.463L7.554 14l.001.001H2zm6-.93l-3.463-1.982L2 12.491v-4.49h6v5.07zM10 13h1v1h-1z\"/></g><g id=\"icon_x5F_fg\"><path class=\"st2\" d=\"M2 14h5.554v.001H2z\"/><path class=\"st3\" d=\"M11 5v6h-1V6H5V5z\"/><path class=\"st3\" d=\"M2 12.491l2.537-1.402L8 13.071v-5.07H2v4.49zM6.192 9a.807.807 0 1 1 .001 1.615A.807.807 0 0 1 6.192 9z\"/><path class=\"st3\" d=\"M2 13.721V14h5.554l-3.017-1.742z\"/></g></svg>';\n}\n\nRTE_DefaultConfig.plugin_imageeditor = RTE_Plugin_ImageEditor;\n\nfunction RTE_Plugin_ImageEditor() {\n  var obj = this;\n  var config, editor;\n  obj.PluginName = \"ImageEditor\";\n\n  obj.InitConfig = function (argconfig) {\n    config = argconfig;\n  };\n\n  obj.InitEditor = function (argeditor) {\n    editor = argeditor;\n    editor.attachEvent(\"exec_command_imageeditor\", function (state, cmd, value) {\n      obj.DoImageEditor();\n      state.returnValue = true;\n    });\n\n    editor.toolbarFactoryMap[\"imageeditor\"] = function (cmd) {\n      var span = editor.createToolbarButton(cmd);\n      span.style.backgroundColor = '';\n      return span;\n    };\n  };\n\n  function __Append(parent, tagname, csstext, cssclass) {\n    var tag = parent.ownerDocument.createElement(tagname);\n    if (csstext) tag.style.cssText = csstext;\n    if (cssclass) tag.className = cssclass;\n    parent.appendChild(tag);\n    return tag;\n  }\n\n  function dataURLToBlob(dataurl) {\n    var arr = dataurl.split(',');\n    var mime = arr[0].match(/:(.*?);/)[1];\n    var bstr = atob(arr[1]);\n    var n = bstr.length;\n    var u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new Blob([u8arr], {\n      type: mime\n    });\n  }\n\n  obj.DoImageEditor = function () {\n    var img = editor.getSelectedControl();\n    if (!img) return;\n    var dialoginner = editor.createDialog(\"ImageEditor\", \"rte-dialog-imageeditor\");\n    dialoginner.style.width = \"90%\";\n    dialoginner.style.height = \"90%\";\n    var scriptbase = config.url_base + \"/plugins/tui.image-editor/\";\n\n    window.rte_image_editor_callback = function (win) {\n      console.log(win);\n      var options = {\n        includeUI: {\n          loadImage: {\n            path: img.src,\n            name: 'RteImage'\n          },\n          //locale: locale_ru_RU,\n          theme: {\n            // main icons\n            'menu.normalIcon.path': scriptbase + 'svg/icon-d.svg',\n            'menu.activeIcon.path': scriptbase + 'svg/icon-b.svg',\n            'menu.disabledIcon.path': scriptbase + 'svg/icon-a.svg',\n            'menu.hoverIcon.path': scriptbase + 'svg/icon-c.svg',\n            // submenu icons\n            'submenu.normalIcon.path': scriptbase + 'svg/icon-d.svg',\n            'submenu.normalIcon.name': 'icon-d',\n            'submenu.activeIcon.path': scriptbase + 'svg/icon-c.svg',\n            'submenu.activeIcon.name': 'icon-c'\n          },\n          //initMenu: 'filter',\n          menuBarPosition: 'bottom'\n        },\n        cssMaxWidth: 700,\n        cssMaxHeight: 500,\n        selectionStyle: {\n          cornerSize: 20,\n          rotatingPointOffset: 70\n        }\n      };\n      var imgeditor = new win.tui.ImageEditor(win.document.querySelector('#tui-image-editor'), options);\n      var btns = win.document.querySelector('.tui-image-editor-header-buttons');\n      btns.innerHTML = '';\n\n      var savebtn = __Append(btns, \"button\", \"\");\n\n      savebtn.innerText = \"Save\";\n\n      savebtn.onclick = function () {\n        var dataurl = imgeditor.toDataURL();\n\n        if (!config.file_upload_handler) {\n          img.src = dataurl;\n          editor.notifySelectionChange();\n          dialoginner.close();\n          return;\n        }\n\n        var file = dataURLToBlob(dataurl);\n        config.file_upload_handler(file, function (url, error) {\n          if (url) {\n            img.src = url;\n            editor.notifySelectionChange();\n            dialoginner.close();\n            return;\n          }\n\n          if (error) {\n            //TODO:retry dialog or cancel\n            alert(\"upload failed , TODO:show retry dialog or cancel\");\n          } else {\n            alert(\"Developer warning : \");\n          }\n        });\n      };\n    };\n\n    iframe = __Append(dialoginner, \"iframe\", \"align-self:center;flex:99;width:100%;height:100%px;border:0px;\", \"rte-editable\");\n    iframe.contentDocument.open(\"text/html\");\n    iframe.contentDocument.write(\"<html><head><base href='\" + editor.htmlEncode(location.href) + \"'/>\" + \"<link id='url-css-preview' rel='stylesheet' href='\" + editor.htmlEncode(scriptbase + \"tui-color-picker.min.css\") + \"'/>\" + \"<link id='url-css-preview' rel='stylesheet' href='\" + editor.htmlEncode(scriptbase + \"tui-image-editor.min.css\") + \"'/>\" + \"<script src='\" + editor.htmlEncode(scriptbase + \"fabric.min.js\") + \"'></script>\" + \"<script src='\" + editor.htmlEncode(scriptbase + \"tui-color-picker.min.js\") + \"'></script>\" + \"<script src='\" + editor.htmlEncode(scriptbase + \"tui-code-snippet.min.js\") + \"'></script>\" + \"<script src='\" + editor.htmlEncode(scriptbase + \"tui-image-editor.min.js\") + \"'></script>\" + \"</head><body style='padding:10px;margin:0px'><div id='tui-image-editor'></div></body>\" + \"<script>window.onload=function(){setTimeout(function(){parent.rte_image_editor_callback(window)},100)}</script></html>\");\n    iframe.contentDocument.close();\n  };\n}\n\nif (!RTE_DefaultConfig.svgCode_insertcode) {\n  RTE_DefaultConfig.svgCode_insertcode = '<svg viewBox=\"-2 -2 20 20\" fill=\"#5F6368\"><path fill-rule=\"evenodd\" d=\"M4 1h8a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V3a2 2 0 012-2zm0 1a1 1 0 00-1 1v10a1 1 0 001 1h8a1 1 0 001-1V3a1 1 0 00-1-1H4z\" clip-rule=\"evenodd\"/><path fill-rule=\"evenodd\" d=\"M8.646 5.646a.5.5 0 01.708 0l2 2a.5.5 0 010 .708l-2 2a.5.5 0 01-.708-.708L10.293 8 8.646 6.354a.5.5 0 010-.708zm-1.292 0a.5.5 0 00-.708 0l-2 2a.5.5 0 000 .708l2 2a.5.5 0 00.708-.708L5.707 8l1.647-1.646a.5.5 0 000-.708z\" clip-rule=\"evenodd\"/></svg>';\n}\n\nRTE_DefaultConfig.plugin_insertcode = RTE_Plugin_InsertCode;\n\nfunction RTE_Plugin_InsertCode() {\n  var dp = {\n    sh: {\n      Toolbar: {},\n      Utils: {},\n      RegexLib: {},\n      Brushes: {},\n      Version: '1.5.1'\n    }\n  };\n  dp.InsertCode = dp.sh;\n\n  dp.sh.Utils.CopyStyles = function (destDoc, sourceDoc) {\n    var links = sourceDoc.getElementsByTagName('link');\n\n    for (var i = 0; i < links.length; i++) {\n      if (links[i].rel.toLowerCase() == 'stylesheet') destDoc.write('<link type=\"text/css\" rel=\"stylesheet\" href=\"' + links[i].href + '\"></link>');\n    }\n  };\n\n  dp.sh.Utils.FixForBlogger = function (str) {\n    return dp.sh.isBloggerMode == true ? str.replace(/<br\\s*\\/?>|&lt;br\\s*\\/?&gt;/gi, '\\n') : str;\n  };\n\n  dp.sh.RegexLib = {\n    MultiLineCComments: new RegExp('/\\\\*[\\\\s\\\\S]*?\\\\*/', 'gm'),\n    SingleLineCComments: new RegExp('//.*$', 'gm'),\n    SingleLinePerlComments: new RegExp('#.*$', 'gm'),\n    DoubleQuotedString: new RegExp('\"(?:\\\\.|(\\\\\\\\\\\\\")|[^\\\\\"\"\\\\n])*\"', 'g'),\n    SingleQuotedString: new RegExp(\"'(?:\\\\.|(\\\\\\\\\\\\')|[^\\\\''\\\\n])*'\", 'g')\n  };\n\n  dp.sh.Match = function (value, index, css) {\n    this.value = value;\n    this.index = index;\n    this.length = value.length;\n    this.css = css;\n  };\n\n  dp.sh.Highlighter = function () {\n    this.noGutter = false;\n    this.addControls = true;\n    this.collapse = false;\n    this.tabsToSpaces = true;\n    this.wrapColumn = 80;\n    this.showColumns = true;\n  };\n\n  dp.sh.Highlighter.SortCallback = function (m1, m2) {\n    if (m1.index < m2.index) return -1;else if (m1.index > m2.index) return 1;else {\n      if (m1.length < m2.length) return -1;else if (m1.length > m2.length) return 1;\n    }\n    return 0;\n  };\n\n  dp.sh.Highlighter.prototype.CreateElement = function (name) {\n    var result = document.createElement(name);\n    result.highlighter = this;\n    return result;\n  };\n\n  dp.sh.Highlighter.prototype.GetMatches = function (regex, css) {\n    var index = 0;\n    var match = null;\n\n    while ((match = regex.exec(this.code)) != null) {\n      this.matches[this.matches.length] = new dp.sh.Match(match[0], match.index, css);\n    }\n  };\n\n  dp.sh.Highlighter.prototype.AddBit = function (str, css) {\n    if (str == null || str.length == 0) return;\n    var span = this.CreateElement('SPAN');\n    str = str.replace(/ /g, '&nbsp;');\n    str = str.replace(/</g, '&lt;');\n    str = str.replace(/\\n/gm, '&nbsp;<br>');\n\n    if (css != null) {\n      if (/br/gi.test(str)) {\n        var lines = str.split('&nbsp;<br>');\n\n        for (var i = 0; i < lines.length; i++) {\n          span = this.CreateElement('SPAN');\n          span.className = css;\n          span.innerHTML = lines[i];\n          this.div.appendChild(span);\n          if (i + 1 < lines.length) this.div.appendChild(this.CreateElement('BR'));\n        }\n      } else {\n        span.className = css;\n        span.innerHTML = str;\n        this.div.appendChild(span);\n      }\n    } else {\n      span.innerHTML = str;\n      this.div.appendChild(span);\n    }\n  };\n\n  dp.sh.Highlighter.prototype.IsInside = function (match) {\n    if (match == null || match.length == 0) return false;\n\n    for (var i = 0; i < this.matches.length; i++) {\n      var c = this.matches[i];\n      if (c == null) continue;\n      if (match.index > c.index && match.index < c.index + c.length) return true;\n    }\n\n    return false;\n  };\n\n  dp.sh.Highlighter.prototype.ProcessRegexList = function () {\n    for (var i = 0; i < this.regexList.length; i++) {\n      this.GetMatches(this.regexList[i].regex, this.regexList[i].css);\n    }\n  };\n\n  dp.sh.Highlighter.prototype.ProcessSmartTabs = function (code) {\n    var lines = code.split('\\n');\n    var result = '';\n    var tabSize = 4;\n    var tab = '\\t';\n\n    function InsertSpaces(line, pos, count) {\n      var left = line.substr(0, pos);\n      var right = line.substr(pos + 1, line.length);\n      var spaces = '';\n\n      for (var i = 0; i < count; i++) {\n        spaces += ' ';\n      }\n\n      return left + spaces + right;\n    }\n\n    function ProcessLine(line, tabSize) {\n      if (line.indexOf(tab) == -1) return line;\n      var pos = 0;\n\n      while ((pos = line.indexOf(tab)) != -1) {\n        var spaces = tabSize - pos % tabSize;\n        line = InsertSpaces(line, pos, spaces);\n      }\n\n      return line;\n    }\n\n    for (var i = 0; i < lines.length; i++) {\n      result += ProcessLine(lines[i], tabSize) + '\\n';\n    }\n\n    return result;\n  };\n\n  dp.sh.Highlighter.prototype.SwitchToList = function () {\n    var html = this.div.innerHTML.replace(/<(br)\\/?>/gi, '\\n');\n    var lines = html.split('\\n');\n    if (this.addControls == true) this.bar.appendChild(dp.sh.Toolbar.Create(this));\n\n    if (this.showColumns) {\n      var div = this.CreateElement('div');\n      var columns = this.CreateElement('div');\n      var showEvery = 10;\n      var i = 1;\n\n      while (i <= 150) {\n        if (i % showEvery == 0) {\n          div.innerHTML += i;\n          i += (i + '').length;\n        } else {\n          div.innerHTML += '&middot;';\n          i++;\n        }\n      }\n\n      columns.className = 'columns';\n      columns.appendChild(div);\n      this.bar.appendChild(columns);\n    }\n\n    for (var i = 0, lineIndex = this.firstLine; i < lines.length - 1; i++, lineIndex++) {\n      var li = this.CreateElement('LI');\n      var span = this.CreateElement('SPAN');\n      li.className = i % 2 == 0 ? 'alt' : '';\n      span.innerHTML = lines[i] + '&nbsp;';\n      li.appendChild(span);\n      this.ol.appendChild(li);\n    }\n\n    this.div.innerHTML = '';\n  };\n\n  dp.sh.Highlighter.prototype.Highlight = function (code) {\n    function Trim(str) {\n      return str.replace(/^\\s*(.*?)[\\s\\n]*$/g, '$1');\n    }\n\n    function Chop(str) {\n      return str.replace(/\\n*$/, '').replace(/^\\n*/, '');\n    }\n\n    function Unindent(str) {\n      var lines = dp.sh.Utils.FixForBlogger(str).split('\\n');\n      var indents = new Array();\n      var regex = new RegExp('^\\\\s*', 'g');\n      var min = 1000;\n\n      for (var i = 0; i < lines.length && min > 0; i++) {\n        if (Trim(lines[i]).length == 0) continue;\n        var matches = regex.exec(lines[i]);\n        if (matches != null && matches.length > 0) min = Math.min(matches[0].length, min);\n      }\n\n      if (min > 0) for (var i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].substr(min);\n      }\n      return lines.join('\\n');\n    }\n\n    function Copy(string, pos1, pos2) {\n      return string.substr(pos1, pos2 - pos1);\n    }\n\n    var pos = 0;\n    if (code == null) code = '';\n    this.originalCode = code;\n    this.code = Chop(Unindent(code));\n    this.div = this.CreateElement('DIV');\n    this.bar = this.CreateElement('DIV');\n    this.ol = this.CreateElement('OL');\n    this.matches = new Array();\n    this.div.className = 'dp-highlighter';\n    this.div.highlighter = this;\n    this.bar.className = 'bar';\n    this.ol.start = this.firstLine;\n    if (this.CssClass != null) this.ol.className = this.CssClass;\n    if (this.collapse) this.div.className += ' collapsed';\n    if (this.noGutter) this.div.className += ' nogutter';\n    if (this.tabsToSpaces == true) this.code = this.ProcessSmartTabs(this.code);\n    this.ProcessRegexList();\n\n    if (this.matches.length == 0) {\n      this.AddBit(this.code, null);\n      this.SwitchToList();\n      this.div.appendChild(this.bar);\n      this.div.appendChild(this.ol);\n      return;\n    }\n\n    this.matches = this.matches.sort(dp.sh.Highlighter.SortCallback);\n\n    for (var i = 0; i < this.matches.length; i++) {\n      if (this.IsInside(this.matches[i])) this.matches[i] = null;\n    }\n\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match == null || match.length == 0) continue;\n      this.AddBit(Copy(this.code, pos, match.index), null);\n      this.AddBit(match.value, match.css);\n      pos = match.index + match.length;\n    }\n\n    this.AddBit(this.code.substr(pos), null);\n    this.SwitchToList();\n    this.div.appendChild(this.bar);\n    this.div.appendChild(this.ol);\n  };\n\n  dp.sh.Highlighter.prototype.GetKeywords = function (str) {\n    return '\\\\b' + str.replace(/ /g, '\\\\b|\\\\b') + '\\\\b';\n  };\n\n  dp.sh.BloggerMode = function () {\n    dp.sh.isBloggerMode = true;\n  };\n\n  dp.sh.HighlightAll = function (element, showGutter, showControls, collapseAll, firstLine, showColumns) {\n    function FindValue() {\n      var a = arguments;\n\n      for (var i = 0; i < a.length; i++) {\n        if (a[i] == null) continue;\n        if (typeof a[i] == 'string' && a[i] != '') return a[i] + '';\n        if (_typeof(a[i]) == 'object' && a[i].value != '') return a[i].value + '';\n      }\n\n      return null;\n    }\n\n    function IsOptionSet(value, list) {\n      for (var i = 0; i < list.length; i++) {\n        if (list[i] == value) return true;\n      }\n\n      return false;\n    }\n\n    function GetOptionValue(name, list, defaultValue) {\n      var regex = new RegExp('^' + name + '\\\\[(\\\\w+)\\\\]$', 'gi');\n      var matches = null;\n\n      for (var i = 0; i < list.length; i++) {\n        if ((matches = regex.exec(list[i])) != null) return matches[1];\n      }\n\n      return defaultValue;\n    }\n\n    function FindTagsByName(list, name, tagName) {\n      var tags = document.getElementsByTagName(tagName);\n\n      for (var i = 0; i < tags.length; i++) {\n        if (tags[i].getAttribute('name') == name) list.push(tags[i]);\n      }\n    }\n\n    var elements = [element];\n    var highlighter = null;\n    var registered = {};\n    var propertyName = 'innerHTML';\n\n    for (var brush in dp.sh.Brushes) {\n      var aliases = dp.sh.Brushes[brush].Aliases;\n      if (aliases == null) continue;\n\n      for (var i = 0; i < aliases.length; i++) {\n        registered[aliases[i]] = brush;\n      }\n    }\n\n    for (var i = 0; i < elements.length; i++) {\n      var element = elements[i];\n      var options = FindValue(element.attributes['class'], element.className, element.attributes['language'], element.language);\n      var language = '';\n      if (options == null) continue;\n      options = options.split(':');\n      language = options[0].toLowerCase();\n      if (registered[language] == null) continue;\n      highlighter = new dp.sh.Brushes[registered[language]]();\n      element.style.display = 'none';\n      highlighter.noGutter = showGutter == null ? IsOptionSet('nogutter', options) : !showGutter;\n      highlighter.addControls = showControls == null ? !IsOptionSet('nocontrols', options) : showControls;\n      highlighter.collapse = collapseAll == null ? IsOptionSet('collapse', options) : collapseAll;\n      highlighter.showColumns = showColumns == null ? IsOptionSet('showcolumns', options) : showColumns;\n      var headNode = document.getElementsByTagName('head')[0];\n\n      if (highlighter.Style && headNode) {\n        var styleNode = document.createElement('style');\n        styleNode.setAttribute('type', 'text/css');\n\n        if (styleNode.styleSheet) {\n          styleNode.styleSheet.cssText = highlighter.Style;\n        } else {\n          var textNode = document.createTextNode(highlighter.Style);\n          styleNode.appendChild(textNode);\n        }\n\n        headNode.appendChild(styleNode);\n      }\n\n      highlighter.firstLine = firstLine == null ? parseInt(GetOptionValue('firstline', options, 1)) : firstLine;\n      highlighter.Highlight(element[propertyName]);\n      highlighter.source = element;\n      element.parentNode.insertBefore(highlighter.div, element);\n    }\n  };\n\n  dp.sh.Brushes.JScript = function () {\n    var keywords = 'abstract boolean break byte case catch char class const continue debugger ' + 'default delete do double else enum export extends false final finally float ' + 'for function goto if implements import in instanceof int interface long native ' + 'new null package private protected public return short static super switch ' + 'synchronized this throw throws transient true try typeof var void volatile while with';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.SingleLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.MultiLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp('^\\\\s*#.*', 'gm'),\n      css: 'preprocessor'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }];\n    this.CssClass = 'dp-c';\n  };\n\n  dp.sh.Brushes.JScript.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.JScript.Aliases = ['js', 'jscript', 'javascript'];\n\n  dp.sh.Brushes.Java = function () {\n    var keywords = 'abstract assert boolean break byte case catch char class const ' + 'continue default do double else enum extends ' + 'false final finally float for goto if implements import ' + 'instanceof int interface long native new null ' + 'package private protected public return ' + 'short static strictfp super switch synchronized this throw throws true ' + 'transient try void volatile while';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.SingleLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.MultiLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp('\\\\b([\\\\d]+(\\\\.[\\\\d]+)?|0x[a-f0-9]+)\\\\b', 'gi'),\n      css: 'number'\n    }, {\n      regex: new RegExp('(?!\\\\@interface\\\\b)\\\\@[\\\\$\\\\w]+\\\\b', 'g'),\n      css: 'annotation'\n    }, {\n      regex: new RegExp('\\\\@interface\\\\b', 'g'),\n      css: 'keyword'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }];\n    this.CssClass = 'dp-j';\n    this.Style = '.dp-j .annotation { color: #646464; }' + '.dp-j .number { color: #C00000; }';\n  };\n\n  dp.sh.Brushes.Java.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Java.Aliases = ['java'];\n\n  dp.sh.Brushes.Cpp = function () {\n    var datatypes = 'ATOM BOOL BOOLEAN BYTE CHAR COLORREF DWORD DWORDLONG DWORD_PTR ' + 'DWORD32 DWORD64 FLOAT HACCEL HALF_PTR HANDLE HBITMAP HBRUSH ' + 'HCOLORSPACE HCONV HCONVLIST HCURSOR HDC HDDEDATA HDESK HDROP HDWP ' + 'HENHMETAFILE HFILE HFONT HGDIOBJ HGLOBAL HHOOK HICON HINSTANCE HKEY ' + 'HKL HLOCAL HMENU HMETAFILE HMODULE HMONITOR HPALETTE HPEN HRESULT ' + 'HRGN HRSRC HSZ HWINSTA HWND INT INT_PTR INT32 INT64 LANGID LCID LCTYPE ' + 'LGRPID LONG LONGLONG LONG_PTR LONG32 LONG64 LPARAM LPBOOL LPBYTE LPCOLORREF ' + 'LPCSTR LPCTSTR LPCVOID LPCWSTR LPDWORD LPHANDLE LPINT LPLONG LPSTR LPTSTR ' + 'LPVOID LPWORD LPWSTR LRESULT PBOOL PBOOLEAN PBYTE PCHAR PCSTR PCTSTR PCWSTR ' + 'PDWORDLONG PDWORD_PTR PDWORD32 PDWORD64 PFLOAT PHALF_PTR PHANDLE PHKEY PINT ' + 'PINT_PTR PINT32 PINT64 PLCID PLONG PLONGLONG PLONG_PTR PLONG32 PLONG64 POINTER_32 ' + 'POINTER_64 PSHORT PSIZE_T PSSIZE_T PSTR PTBYTE PTCHAR PTSTR PUCHAR PUHALF_PTR ' + 'PUINT PUINT_PTR PUINT32 PUINT64 PULONG PULONGLONG PULONG_PTR PULONG32 PULONG64 ' + 'PUSHORT PVOID PWCHAR PWORD PWSTR SC_HANDLE SC_LOCK SERVICE_STATUS_HANDLE SHORT ' + 'SIZE_T SSIZE_T TBYTE TCHAR UCHAR UHALF_PTR UINT UINT_PTR UINT32 UINT64 ULONG ' + 'ULONGLONG ULONG_PTR ULONG32 ULONG64 USHORT USN VOID WCHAR WORD WPARAM WPARAM WPARAM ' + 'char bool short int __int32 __int64 __int8 __int16 long float double __wchar_t ' + 'clock_t _complex _dev_t _diskfree_t div_t ldiv_t _exception _EXCEPTION_POINTERS ' + 'FILE _finddata_t _finddatai64_t _wfinddata_t _wfinddatai64_t __finddata64_t ' + '__wfinddata64_t _FPIEEE_RECORD fpos_t _HEAPINFO _HFILE lconv intptr_t ' + 'jmp_buf mbstate_t _off_t _onexit_t _PNH ptrdiff_t _purecall_handler ' + 'sig_atomic_t size_t _stat __stat64 _stati64 terminate_function ' + 'time_t __time64_t _timeb __timeb64 tm uintptr_t _utimbuf ' + 'va_list wchar_t wctrans_t wctype_t wint_t signed';\n    var keywords = 'break case catch class const __finally __exception __try ' + 'const_cast continue private public protected __declspec ' + 'default delete deprecated dllexport dllimport do dynamic_cast ' + 'else enum explicit extern if for friend goto inline ' + 'mutable naked namespace new noinline noreturn nothrow ' + 'register reinterpret_cast return selectany ' + 'sizeof static static_cast struct switch template this ' + 'thread throw true false try typedef typeid typename union ' + 'using uuid virtual void volatile whcar_t while';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.SingleLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.MultiLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp('^ *#.*', 'gm'),\n      css: 'preprocessor'\n    }, {\n      regex: new RegExp(this.GetKeywords(datatypes), 'gm'),\n      css: 'datatypes'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }];\n    this.CssClass = 'dp-cpp';\n    this.Style = '.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }';\n  };\n\n  dp.sh.Brushes.Cpp.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Cpp.Aliases = ['cpp', 'c', 'c++'];\n\n  dp.sh.Brushes.CSharp = function () {\n    var keywords = 'abstract as base bool break byte case catch char checked class const ' + 'continue decimal default delegate do double else enum event explicit ' + 'extern false finally fixed float for foreach get goto if implicit in int ' + 'interface internal is lock long namespace new null object operator out ' + 'override params private protected public readonly ref return sbyte sealed set ' + 'short sizeof stackalloc static string struct switch this throw true try ' + 'typeof uint ulong unchecked unsafe ushort using virtual void while';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.SingleLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.MultiLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp('^\\\\s*#.*', 'gm'),\n      css: 'preprocessor'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }];\n    this.CssClass = 'dp-c';\n    this.Style = '.dp-c .vars { color: #d00; }';\n  };\n\n  dp.sh.Brushes.CSharp.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.CSharp.Aliases = ['c#', 'c-sharp', 'csharp'];\n\n  dp.sh.Brushes.CSS = function () {\n    var keywords = 'ascent azimuth background-attachment background-color background-image background-position ' + 'background-repeat background baseline bbox border-collapse border-color border-spacing border-style border-top ' + 'border-right border-bottom border-left border-top-color border-right-color border-bottom-color border-left-color ' + 'border-top-style border-right-style border-bottom-style border-left-style border-top-width border-right-width ' + 'border-bottom-width border-left-width border-width border cap-height caption-side centerline clear clip color ' + 'content counter-increment counter-reset cue-after cue-before cue cursor definition-src descent direction display ' + 'elevation empty-cells float font-size-adjust font-family font-size font-stretch font-style font-variant font-weight font ' + 'height letter-spacing line-height list-style-image list-style-position list-style-type list-style margin-top ' + 'margin-right margin-bottom margin-left margin marker-offset marks mathline max-height max-width min-height min-width orphans ' + 'outline-color outline-style outline-width outline overflow padding-top padding-right padding-bottom padding-left padding page ' + 'page-break-after page-break-before page-break-inside pause pause-after pause-before pitch pitch-range play-during position ' + 'quotes richness size slope src speak-header speak-numeral speak-punctuation speak speech-rate stemh stemv stress ' + 'table-layout text-align text-decoration text-indent text-shadow text-transform unicode-bidi unicode-range units-per-em ' + 'vertical-align visibility voice-family volume white-space widows width widths word-spacing x-height z-index';\n    var values = 'above absolute all always aqua armenian attr aural auto avoid baseline behind below bidi-override black blink block blue bold bolder ' + 'both bottom braille capitalize caption center center-left center-right circle close-quote code collapse compact condensed ' + 'continuous counter counters crop cross crosshair cursive dashed decimal decimal-leading-zero default digits disc dotted double ' + 'embed embossed e-resize expanded extra-condensed extra-expanded fantasy far-left far-right fast faster fixed format fuchsia ' + 'gray green groove handheld hebrew help hidden hide high higher icon inline-table inline inset inside invert italic ' + 'justify landscape large larger left-side left leftwards level lighter lime line-through list-item local loud lower-alpha ' + 'lowercase lower-greek lower-latin lower-roman lower low ltr marker maroon medium message-box middle mix move narrower ' + 'navy ne-resize no-close-quote none no-open-quote no-repeat normal nowrap n-resize nw-resize oblique olive once open-quote outset ' + 'outside overline pointer portrait pre print projection purple red relative repeat repeat-x repeat-y rgb ridge right right-side ' + 'rightwards rtl run-in screen scroll semi-condensed semi-expanded separate se-resize show silent silver slower slow ' + 'small small-caps small-caption smaller soft solid speech spell-out square s-resize static status-bar sub super sw-resize ' + 'table-caption table-cell table-column table-column-group table-footer-group table-header-group table-row table-row-group teal ' + 'text-bottom text-top thick thin top transparent tty tv ultra-condensed ultra-expanded underline upper-alpha uppercase upper-latin ' + 'upper-roman url visible wait white wider w-resize x-fast x-high x-large x-loud x-low x-slow x-small x-soft xx-large xx-small yellow';\n    var fonts = '[mM]onospace [tT]ahoma [vV]erdana [aA]rial [hH]elvetica [sS]ans-serif [sS]erif';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.MultiLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp('\\\\#[a-zA-Z0-9]{3,6}', 'g'),\n      css: 'value'\n    }, {\n      regex: new RegExp('(-?\\\\d+)(\\.\\\\d+)?(px|em|pt|\\:|\\%|)', 'g'),\n      css: 'value'\n    }, {\n      regex: new RegExp('!important', 'g'),\n      css: 'important'\n    }, {\n      regex: new RegExp(this.GetKeywordsCSS(keywords), 'gm'),\n      css: 'keyword'\n    }, {\n      regex: new RegExp(this.GetValuesCSS(values), 'g'),\n      css: 'value'\n    }, {\n      regex: new RegExp(this.GetValuesCSS(fonts), 'g'),\n      css: 'value'\n    }];\n    this.CssClass = 'dp-css';\n    this.Style = '.dp-css .value { color: black; }' + '.dp-css .important { color: red; }';\n  };\n\n  dp.sh.Highlighter.prototype.GetKeywordsCSS = function (str) {\n    return '\\\\b([a-z_]|)' + str.replace(/ /g, '(?=:)\\\\b|\\\\b([a-z_\\\\*]|\\\\*|)') + '(?=:)\\\\b';\n  };\n\n  dp.sh.Highlighter.prototype.GetValuesCSS = function (str) {\n    return '\\\\b' + str.replace(/ /g, '(?!-)(?!:)\\\\b|\\\\b()') + '\\:\\\\b';\n  };\n\n  dp.sh.Brushes.CSS.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.CSS.Aliases = ['css'];\n\n  dp.sh.Brushes.Php = function () {\n    var funcs = 'abs acos acosh addcslashes addslashes ' + 'array_change_key_case array_chunk array_combine array_count_values array_diff ' + 'array_diff_assoc array_diff_key array_diff_uassoc array_diff_ukey array_fill ' + 'array_filter array_flip array_intersect array_intersect_assoc array_intersect_key ' + 'array_intersect_uassoc array_intersect_ukey array_key_exists array_keys array_map ' + 'array_merge array_merge_recursive array_multisort array_pad array_pop array_product ' + 'array_push array_rand array_reduce array_reverse array_search array_shift ' + 'array_slice array_splice array_sum array_udiff array_udiff_assoc ' + 'array_udiff_uassoc array_uintersect array_uintersect_assoc ' + 'array_uintersect_uassoc array_unique array_unshift array_values array_walk ' + 'array_walk_recursive atan atan2 atanh base64_decode base64_encode base_convert ' + 'basename bcadd bccomp bcdiv bcmod bcmul bindec bindtextdomain bzclose bzcompress ' + 'bzdecompress bzerrno bzerror bzerrstr bzflush bzopen bzread bzwrite ceil chdir ' + 'checkdate checkdnsrr chgrp chmod chop chown chr chroot chunk_split class_exists ' + 'closedir closelog copy cos cosh count count_chars date decbin dechex decoct ' + 'deg2rad delete ebcdic2ascii echo empty end ereg ereg_replace eregi eregi_replace error_log ' + 'error_reporting escapeshellarg escapeshellcmd eval exec exit exp explode extension_loaded ' + 'feof fflush fgetc fgetcsv fgets fgetss file_exists file_get_contents file_put_contents ' + 'fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype ' + 'floatval flock floor flush fmod fnmatch fopen fpassthru fprintf fputcsv fputs fread fscanf ' + 'fseek fsockopen fstat ftell ftok getallheaders getcwd getdate getenv gethostbyaddr gethostbyname ' + 'gethostbynamel getimagesize getlastmod getmxrr getmygid getmyinode getmypid getmyuid getopt ' + 'getprotobyname getprotobynumber getrandmax getrusage getservbyname getservbyport gettext ' + 'gettimeofday gettype glob gmdate gmmktime ini_alter ini_get ini_get_all ini_restore ini_set ' + 'interface_exists intval ip2long is_a is_array is_bool is_callable is_dir is_double ' + 'is_executable is_file is_finite is_float is_infinite is_int is_integer is_link is_long ' + 'is_nan is_null is_numeric is_object is_readable is_real is_resource is_scalar is_soap_fault ' + 'is_string is_subclass_of is_uploaded_file is_writable is_writeable mkdir mktime nl2br ' + 'parse_ini_file parse_str parse_url passthru pathinfo readlink realpath rewind rewinddir rmdir ' + 'round str_ireplace str_pad str_repeat str_replace str_rot13 str_shuffle str_split ' + 'str_word_count strcasecmp strchr strcmp strcoll strcspn strftime strip_tags stripcslashes ' + 'stripos stripslashes stristr strlen strnatcasecmp strnatcmp strncasecmp strncmp strpbrk ' + 'strpos strptime strrchr strrev strripos strrpos strspn strstr strtok strtolower strtotime ' + 'strtoupper strtr strval substr substr_compare';\n    var keywords = 'and or xor __FILE__ __LINE__ array as break case ' + 'cfunction class const continue declare default die do else ' + 'elseif empty enddeclare endfor endforeach endif endswitch endwhile ' + 'extends for foreach function include include_once global if ' + 'new old_function return static switch use require require_once ' + 'var while __FUNCTION__ __CLASS__ ' + '__METHOD__ abstract interface public implements extends private protected throw';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.SingleLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.MultiLineCComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp('\\\\$\\\\w+', 'g'),\n      css: 'vars'\n    }, {\n      regex: new RegExp(this.GetKeywords(funcs), 'gmi'),\n      css: 'func'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }];\n    this.CssClass = 'dp-c';\n  };\n\n  dp.sh.Brushes.Php.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Php.Aliases = ['php'];\n\n  dp.sh.Brushes.Python = function () {\n    var keywords = 'and assert break class continue def del elif else ' + 'except exec finally for from global if import in is ' + 'lambda not or pass print raise return try yield while';\n    var special = 'None True False self cls class_';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.SingleLinePerlComments,\n      css: 'comment'\n    }, {\n      regex: new RegExp(\"^\\\\s*@\\\\w+\", 'gm'),\n      css: 'decorator'\n    }, {\n      regex: new RegExp(\"(['\\\"]{3})([^\\\\1])*?\\\\1\", 'gm'),\n      css: 'comment'\n    }, {\n      regex: new RegExp('\"(?!\")(?:\\\\.|\\\\\\\\\\\\\"|[^\\\\\"\"\\\\n\\\\r])*\"', 'gm'),\n      css: 'string'\n    }, {\n      regex: new RegExp(\"'(?!')*(?:\\\\.|(\\\\\\\\\\\\')|[^\\\\''\\\\n\\\\r])*'\", 'gm'),\n      css: 'string'\n    }, {\n      regex: new RegExp(\"\\\\b\\\\d+\\\\.?\\\\w*\", 'g'),\n      css: 'number'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }, {\n      regex: new RegExp(this.GetKeywords(special), 'gm'),\n      css: 'special'\n    }];\n    this.CssClass = 'dp-py';\n    this.Style = '.dp-py .builtins { color: #ff1493; }' + '.dp-py .magicmethods { color: #808080; }' + '.dp-py .exceptions { color: brown; }' + '.dp-py .types { color: brown; font-style: italic; }' + '.dp-py .commonlibs { color: #8A2BE2; font-style: italic; }';\n  };\n\n  dp.sh.Brushes.Python.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Python.Aliases = ['py', 'python'];\n\n  dp.sh.Brushes.Xml = function () {\n    this.CssClass = 'dp-xml';\n    this.Style = '.dp-xml .cdata { color: #ff1493; }' + '.dp-xml .tag, .dp-xml .tag-name { color: #069; font-weight: bold; }' + '.dp-xml .attribute { color: red; }' + '.dp-xml .attribute-value { color: blue; }';\n  };\n\n  dp.sh.Brushes.Xml.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Xml.Aliases = ['xml', 'xhtml', 'xslt', 'html', 'xhtml'];\n\n  dp.sh.Brushes.Xml.prototype.ProcessRegexList = function () {\n    function push(array, value) {\n      array[array.length] = value;\n    }\n\n    var index = 0;\n    var match = null;\n    var regex = null;\n    this.GetMatches(new RegExp('(\\&lt;|<)\\\\!\\\\[[\\\\w\\\\s]*?\\\\[(.|\\\\s)*?\\\\]\\\\](\\&gt;|>)', 'gm'), 'cdata');\n    this.GetMatches(new RegExp('(\\&lt;|<)!--\\\\s*.*?\\\\s*--(\\&gt;|>)', 'gm'), 'comments');\n    regex = new RegExp('([:\\\\w-\\.]+)\\\\s*=\\\\s*(\".*?\"|\\'.*?\\'|\\\\w+)*|(\\\\w+)', 'gm');\n\n    while ((match = regex.exec(this.code)) != null) {\n      if (match[1] == null) {\n        continue;\n      }\n\n      push(this.matches, new dp.sh.Match(match[1], match.index, 'attribute'));\n\n      if (match[2] != undefined) {\n        push(this.matches, new dp.sh.Match(match[2], match.index + match[0].indexOf(match[2]), 'attribute-value'));\n      }\n    }\n\n    this.GetMatches(new RegExp('(\\&lt;|<)/*\\\\?*(?!\\\\!)|/*\\\\?*(\\&gt;|>)', 'gm'), 'tag');\n    regex = new RegExp('(?:\\&lt;|<)/*\\\\?*\\\\s*([:\\\\w-\\.]+)', 'gm');\n\n    while ((match = regex.exec(this.code)) != null) {\n      push(this.matches, new dp.sh.Match(match[1], match.index + match[0].indexOf(match[1]), 'tag-name'));\n    }\n  };\n\n  dp.sh.Brushes.Vb = function () {\n    var keywords = 'AddHandler AddressOf AndAlso Alias And Ansi As Assembly Auto ' + 'Boolean ByRef Byte ByVal Call Case Catch CBool CByte CChar CDate ' + 'CDec CDbl Char CInt Class CLng CObj Const CShort CSng CStr CType ' + 'Date Decimal Declare Default Delegate Dim DirectCast Do Double Each ' + 'Else ElseIf End Enum Erase Error Event Exit False Finally For Friend ' + 'Function Get GetType GoSub GoTo Handles If Implements Imports In ' + 'Inherits Integer Interface Is Let Lib Like Long Loop Me Mod Module ' + 'MustInherit MustOverride MyBase MyClass Namespace New Next Not Nothing ' + 'NotInheritable NotOverridable Object On Option Optional Or OrElse ' + 'Overloads Overridable Overrides ParamArray Preserve Private Property ' + 'Protected Public RaiseEvent ReadOnly ReDim REM RemoveHandler Resume ' + 'Return Select Set Shadows Shared Short Single Static Step Stop String ' + 'Structure Sub SyncLock Then Throw To True Try TypeOf Unicode Until ' + 'Variant When While With WithEvents WriteOnly Xor';\n    this.regexList = [{\n      regex: new RegExp('\\'.*$', 'gm'),\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp('^\\\\s*#.*', 'gm'),\n      css: 'preprocessor'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }];\n    this.CssClass = 'dp-vb';\n  };\n\n  dp.sh.Brushes.Vb.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Vb.Aliases = ['vb', 'vb.net'];\n\n  dp.sh.Brushes.Ruby = function () {\n    var keywords = 'alias and BEGIN begin break case class def define_method defined do each else elsif ' + 'END end ensure false for if in module new next nil not or raise redo rescue retry return ' + 'self super then throw true undef unless until when while yield';\n    var builtins = 'Array Bignum Binding Class Continuation Dir Exception FalseClass File::Stat File Fixnum Fload ' + 'Hash Integer IO MatchData Method Module NilClass Numeric Object Proc Range Regexp String Struct::TMS Symbol ' + 'ThreadGroup Thread Time TrueClass';\n    this.regexList = [{\n      regex: dp.sh.RegexLib.SingleLinePerlComments,\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp(':[a-z][A-Za-z0-9_]*', 'g'),\n      css: 'symbol'\n    }, {\n      regex: new RegExp('(\\\\$|@@|@)\\\\w+', 'g'),\n      css: 'variable'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gm'),\n      css: 'keyword'\n    }, {\n      regex: new RegExp(this.GetKeywords(builtins), 'gm'),\n      css: 'builtin'\n    }];\n    this.CssClass = 'dp-rb';\n    this.Style = '.dp-rb .symbol { color: #a70; }' + '.dp-rb .variable { color: #a70; font-weight: bold; }';\n  };\n\n  dp.sh.Brushes.Ruby.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Ruby.Aliases = ['ruby', 'rails', 'ror'];\n\n  dp.sh.Brushes.Sql = function () {\n    var funcs = 'abs avg case cast coalesce convert count current_timestamp ' + 'current_user day isnull left lower month nullif replace right ' + 'session_user space substring sum system_user upper user year';\n    var keywords = 'absolute action add after alter as asc at authorization begin bigint ' + 'binary bit by cascade char character check checkpoint close collate ' + 'column commit committed connect connection constraint contains continue ' + 'create cube current current_date current_time cursor database date ' + 'deallocate dec decimal declare default delete desc distinct double drop ' + 'dynamic else end end-exec escape except exec execute false fetch first ' + 'float for force foreign forward free from full function global goto grant ' + 'group grouping having hour ignore index inner insensitive insert instead ' + 'int integer intersect into is isolation key last level load local max min ' + 'minute modify move name national nchar next no numeric of off on only ' + 'open option order out output partial password precision prepare primary ' + 'prior privileges procedure public read real references relative repeatable ' + 'restrict return returns revoke rollback rollup rows rule schema scroll ' + 'second section select sequence serializable set size smallint static ' + 'statistics table temp temporary then time timestamp to top transaction ' + 'translation trigger true truncate uncommitted union unique update values ' + 'varchar varying view when where with work';\n    var operators = 'all and any between cross in join like not null or outer some';\n    this.regexList = [{\n      regex: new RegExp('--(.*)$', 'gm'),\n      css: 'comment'\n    }, {\n      regex: dp.sh.RegexLib.DoubleQuotedString,\n      css: 'string'\n    }, {\n      regex: dp.sh.RegexLib.SingleQuotedString,\n      css: 'string'\n    }, {\n      regex: new RegExp(this.GetKeywords(funcs), 'gmi'),\n      css: 'func'\n    }, {\n      regex: new RegExp(this.GetKeywords(operators), 'gmi'),\n      css: 'op'\n    }, {\n      regex: new RegExp(this.GetKeywords(keywords), 'gmi'),\n      css: 'keyword'\n    }];\n    this.CssClass = 'dp-sql';\n    this.Style = '.dp-sql .func { color: #ff1493; }' + '.dp-sql .op { color: #808080; }';\n  };\n\n  dp.sh.Brushes.Sql.prototype = new dp.sh.Highlighter();\n  dp.sh.Brushes.Sql.Aliases = ['sql'];\n  var obj = this;\n  var config, editor;\n  obj.PluginName = \"InsertCode\";\n\n  obj.InitConfig = function (argconfig) {\n    config = argconfig;\n  };\n\n  obj.InitEditor = function (argeditor) {\n    editor = argeditor;\n    editor.attachEvent(\"exec_command_insertcode\", function (state, cmd, value) {\n      console.log(state, cmd, value);\n      obj.DoShowDialog();\n      state.returnValue = true;\n    });\n\n    editor.toolbarFactoryMap[\"insertcode\"] = function (cmd) {\n      //console.log(cmd);\n      var span = editor.createToolbarButton(cmd);\n      span.style.backgroundColor = '';\n      return span;\n    };\n  };\n\n  function __Append(parent, tagname, csstext, cssclass) {\n    var tag = parent.ownerDocument.createElement(tagname);\n    if (csstext) tag.style.cssText = csstext;\n    if (cssclass) tag.className = cssclass;\n    parent.appendChild(tag);\n    return tag;\n  }\n\n  obj.DoShowDialog = function () {\n    var dialoginner = editor.createDialog(editor.getLangText(\"insertcode\"), \"rte-dialog-insertcode\");\n\n    var div2 = __Append(dialoginner, \"div\", \"position:relative;text-align:center;\");\n\n    __Append(div2, \"label\").innerText = editor.getLangText(\"language\") + \":\";\n\n    var sel_lang = __Append(div2, \"select\", \"width:200px;\");\n\n    sel_lang.options.add(new Option(\"Plain Text\", \"\"));\n\n    for (var brush in dp.sh.Brushes) {\n      var aliases = dp.sh.Brushes[brush].Aliases;\n      if (aliases == null) continue;\n      sel_lang.options.add(new Option(aliases, brush));\n      var b = sessionStorage.getItem(\"rte-insertcode-lang\");\n      if (b) sel_lang.value = b;\n    }\n\n    var div1 = __Append(dialoginner, \"div\", \"position:relative;text-align:center;\");\n\n    var textarea = __Append(div1, \"textarea\", \"width:100%;min-width:300px;height:200px\");\n\n    var divfooter = __Append(dialoginner, \"rte-dialog-footer\", null, \"rte-dialog-footer-center\");\n\n    var btn = __Append(divfooter, \"rte-dialog-button\");\n\n    btn.innerText = \"Insert\";\n    setTimeout(function () {\n      textarea.focus();\n    }, 300);\n\n    btn.onclick = function () {\n      dialoginner.close();\n      sessionStorage.setItem(\"rte-insertcode-lang\", sel_lang.value);\n\n      if (sel_lang.value != \"\") {\n        var b = dp.sh.Brushes[sel_lang.value];\n        textarea.language = b.Aliases[0] + \":nocontrols\";\n        textarea.name = \"rteinsertcode\" + new Date().getTime();\n        textarea.innerHTML = textarea.value;\n        dp.sh.HighlightAll(textarea);\n        var tag = textarea.previousSibling;\n        var p = editor.insertRootParagraph();\n        p.innerHTML = '<div class=\"dp-highlighter\">' + tag.innerHTML + \"</div>\";\n      } else {\n        var p = editor.insertRootParagraph();\n        p.innerText = textarea.value;\n      }\n\n      editor.focus();\n    };\n  };\n}\n\nRTE_DefaultConfig.plugin_insertemoji = RTE_Plugin_InsertEmoji;\n\nfunction RTE_Plugin_InsertEmoji() {\n  function CharToHTMLCode(ch) {\n    if (ch.length > 2) return ch;\n    if (ch.length == 1 || ch.charCodeAt(1) == 0xfe0f) return \"&#\" + ch.charCodeAt(0) + \";\";\n\n    if (ch.charCodeAt(1) == 0xfe0f) {\n      return \"&#\" + ch.charCodeAt(0) + \";\";\n    }\n\n    var offset = ch.charCodeAt(0) - 0xd83c;\n    if (offset < 0 && offset > 3) //not support\n      return ch;\n    var second = ch.charCodeAt(1) - 0xdc04;\n    var f = offset * 0x400 + second + 0x1f004;\n    return \"&#x\" + f.toString(16) + \";\";\n  }\n\n  var groupnames = [\"smileys\", \"people\", \"animals\", \"food\", \"travel\", \"activities\", \"objects\", \"symbols\"];\n  var emojistrs = [\"😀#grinning face|😃#grinning face with big eyes|😄#grinning face with smiling eyes|😁#beaming face with smiling eyes|😆#grinning squinting face|😅#grinning face with sweat|🤣#rolling on the floor laughing|😂#face with tears of joy|🙂#slightly smiling face|🙃#upside-down face|😉#winking face|😊#smiling face with smiling eyes|😇#smiling face with halo|😍#smiling face with heart-eyes|🤩#star-struck|😘#face blowing a kiss|😗#kissing face|😚#kissing face with closed eyes|😙#kissing face with smiling eyes|😋#face savoring food|😛#face with tongue|😜#winking face with tongue|🤪#zany face|😝#squinting face with tongue|🤑#money-mouth face|🤗#hugging face|🤭#face with hand over mouth|🤫#shushing face|🤔#thinking face|🤐#zipper-mouth face|🤨#face with raised eyebrow|😐#neutral face|😑#expressionless face|😶#face without mouth|😏#smirking face|😒#unamused face|🙄#face with rolling eyes|😬#grimacing face|🤥#lying face|😌#relieved face|😔#pensive face|😪#sleepy face|🤤#drooling face|😴#sleeping face|😷#face with medical mask|🤒#face with thermometer|🤕#face with head-bandage|🤢#nauseated face|🤮#face vomiting|🤧#sneezing face|😵#dizzy face|🤯#exploding head|🤠#cowboy hat face|😎#smiling face with sunglasses|🤓#nerd face|🧐#face with monocle|😕#confused face|😟#worried face|🙁#slightly frowning face|☹️#frowning face|😮#face with open mouth|😯#hushed face|😲#astonished face|😳#flushed face|😦#frowning face with open mouth|😧#anguished face|😨#fearful face|😰#anxious face with sweat|😥#sad but relieved face|😢#crying face|😭#loudly crying face|😱#face screaming in fear|😖#confounded face|😣#persevering face|😞#disappointed face|😓#downcast face with sweat|😩#weary face|😫#tired face|😤#face with steam from nose|😡#pouting face|😠#angry face|🤬#face with symbols on mouth|😈#smiling face with horns|👿#angry face with horns|💀#skull|☠️#skull and crossbones|💩#pile of poo|🤡#clown face|👹#ogre|👺#goblin|👻#ghost|👽#alien|👾#alien monster|🤖#robot|😺#grinning cat|😸#grinning cat with smiling eyes|😹#cat with tears of joy|😻#smiling cat with heart-eyes|😼#cat with wry smile|😽#kissing cat|🙀#weary cat|😿#crying cat|😾#pouting cat|🙈#see-no-evil monkey|🙉#hear-no-evil monkey|🙊#speak-no-evil monkey|💋#kiss mark|💌#love letter|💘#heart with arrow|💝#heart with ribbon|💖#sparkling heart|💗#growing heart|💓#beating heart|💞#revolving hearts|💕#two hearts|💟#heart decoration|❣️#heart exclamation|💔#broken heart|❤️#red heart|🧡#orange heart|💛#yellow heart|💚#green heart|💙#blue heart|💜#purple heart|🖤#black heart|💯#hundred points|💢#anger symbol|💥#collision|💫#dizzy|💦#sweat droplets|💨#dashing away|💣#bomb|💬#speech balloon|💭#thought balloon|💤#zzz\", \"👋#waving hand|🤚#raised back of hand|✋#raised hand|🖖#vulcan salute|👌#OK hand|✌️#victory hand|🤞#crossed fingers|🤟#love-you gesture|🤘#sign of the horns|🤙#call me hand|👈#backhand index pointing left|👉#backhand index pointing right|👆#backhand index pointing up|🖕#middle finger|👇#backhand index pointing down|☝️#index pointing up|👍#thumbs up|👎#thumbs down|✊#raised fist|👊#oncoming fist|🤛#left-facing fist|🤜#right-facing fist|👏#clapping hands|🙌#raising hands|👐#open hands|🤲#palms up together|🤝#handshake|🙏#folded hands|✍️#writing hand|💅#nail polish|🤳#selfie|💪#flexed biceps|👂#ear|👃#nose|🧠#brain|👀#eyes|👅#tongue|👄#mouth|👶#baby|🧒#child|👦#boy|👧#girl|🧑#person|👱#person with blond hair|👨#man|🧔#man with beard|👩#woman|🧓#older person|👴#old man|👵#old woman|🙍#person frowning|🙎#person pouting|🙅#person gesturing NO|🙆#person gesturing OK|💁#person tipping hand|🙋#person raising hand|🙇#person bowing|🤦#person facepalming|🤷#person shrugging|👮#police officer|💂#guard|👷#construction worker|🤴#prince|👸#princess|👳#person wearing turban|👲#person with skullcap|🧕#woman with headscarf|🤵#person in tuxedo|👰#person with veil|🤰#pregnant woman|🤱#breast-feeding|👼#baby angel|🎅#Santa Claus|🤶#Mrs. Claus|🧙#mage|🧚#fairy|🧛#vampire|🧜#merperson|🧝#elf|🧞#genie|🧟#zombie|💆#person getting massage|💇#person getting haircut|🚶#person walking|🏃#person running|💃#woman dancing|🕺#man dancing|👯#people with bunny ears|🧖#person in steamy room|🧗#person climbing|🤺#person fencing|🏇#horse racing|⛷️#skier|🏂#snowboarder|🏄#person surfing|🚣#person rowing boat|🏊#person swimming|⛹️#person bouncing ball|🚴#person biking|🚵#person mountain biking|🤸#person cartwheeling|🤼#people wrestling|🤽#person playing water polo|🤾#person playing handball|🤹#person juggling|🧘#person in lotus position|🛀#person taking bath|🛌#person in bed|👭#women holding hands|👫#woman and man holding hands|👬#men holding hands|💏#kiss|💑#couple with heart|👪#family|👤#bust in silhouette|👥#busts in silhouette|👣#footprints\", \"🐵#monkey face|🐒#monkey|🦍#gorilla|🐶#dog face|🐕#dog|🐩#poodle|🐺#wolf|🦊#fox|🐱#cat face|🐈#cat|🦁#lion|🐯#tiger face|🐅#tiger|🐆#leopard|🐴#horse face|🐎#horse|🦄#unicorn|🦓#zebra|🦌#deer|🐮#cow face|🐂#ox|🐃#water buffalo|🐄#cow|🐷#pig face|🐖#pig|🐗#boar|🐽#pig nose|🐏#ram|🐑#ewe|🐐#goat|🐪#camel|🐫#two-hump camel|🦒#giraffe|🐘#elephant|🦏#rhinoceros|🐭#mouse face|🐁#mouse|🐀#rat|🐹#hamster|🐰#rabbit face|🐇#rabbit|🦔#hedgehog|🦇#bat|🐻#bear|🐨#koala|🐼#panda|🐾#paw prints|🦃#turkey|🐔#chicken|🐓#rooster|🐣#hatching chick|🐤#baby chick|🐥#front-facing baby chick|🐦#bird|🐧#penguin|🦅#eagle|🦆#duck|🦉#owl|🐸#frog|🐊#crocodile|🐢#turtle|🦎#lizard|🐍#snake|🐲#dragon face|🐉#dragon|🦕#sauropod|🦖#T-Rex|🐳#spouting whale|🐋#whale|🐬#dolphin|🐟#fish|🐠#tropical fish|🐡#blowfish|🦈#shark|🐙#octopus|🐚#spiral shell|🐌#snail|🦋#butterfly|🐛#bug|🐜#ant|🐝#honeybee|🐞#lady beetle|🦗#cricket|🦂#scorpion|💐#bouquet|🌸#cherry blossom|💮#white flower|🌹#rose|🥀#wilted flower|🌺#hibiscus|🌻#sunflower|🌼#blossom|🌷#tulip|🌱#seedling|🌲#evergreen tree|🌳#deciduous tree|🌴#palm tree|🌵#cactus|🌾#sheaf of rice|🌿#herb|☘️#shamrock|🍀#four leaf clover|🍁#maple leaf|🍂#fallen leaf|🍃#leaf fluttering in wind\", \"🍇#grapes|🍈#melon|🍉#watermelon|🍊#tangerine|🍋#lemon|🍌#banana|🍍#pineapple|🍎#red apple|🍏#green apple|🍐#pear|🍑#peach|🍒#cherries|🍓#strawberry|🥝#kiwi fruit|🍅#tomato|🥥#coconut|🥑#avocado|🍆#eggplant|🥔#potato|🥕#carrot|🌽#ear of corn|🥒#cucumber|🥦#broccoli|🍄#mushroom|🥜#peanuts|🌰#chestnut|🍞#bread|🥐#croissant|🥖#baguette bread|🥨#pretzel|🥞#pancakes|🧀#cheese wedge|🍖#meat on bone|🍗#poultry leg|🥩#cut of meat|🥓#bacon|🍔#hamburger|🍟#french fries|🍕#pizza|🌭#hot dog|🥪#sandwich|🌮#taco|🌯#burrito|🥙#stuffed flatbread|🥚#egg|🍳#cooking|🥘#shallow pan of food|🍲#pot of food|🥣#bowl with spoon|🥗#green salad|🍿#popcorn|🥫#canned food|🍱#bento box|🍘#rice cracker|🍙#rice ball|🍚#cooked rice|🍛#curry rice|🍜#steaming bowl|🍝#spaghetti|🍠#roasted sweet potato|🍢#oden|🍣#sushi|🍤#fried shrimp|🍥#fish cake with swirl|🍡#dango|🥟#dumpling|🥠#fortune cookie|🥡#takeout box|🦀#crab|🦐#shrimp|🦑#squid|🍦#soft ice cream|🍧#shaved ice|🍨#ice cream|🍩#doughnut|🍪#cookie|🎂#birthday cake|🍰#shortcake|🥧#pie|🍫#chocolate bar|🍬#candy|🍭#lollipop|🍮#custard|🍯#honey pot|🍼#baby bottle|🥛#glass of milk|☕#hot beverage|🍵#teacup without handle|🍶#sake|🍾#bottle with popping cork|🍷#wine glass|🍸#cocktail glass|🍹#tropical drink|🍺#beer mug|🍻#clinking beer mugs|🥂#clinking glasses|🥃#tumbler glass|🥤#cup with straw|🥢#chopsticks|🍴#fork and knife|🥄#spoon|🔪#kitchen knife|🏺#amphora\", \"🌍#globe showing Europe-Africa|🌎#globe showing Americas|🌏#globe showing Asia-Australia|🌐#globe with meridians|🗾#map of Japan|⛰️#mountain|🌋#volcano|🗻#mount fuji|🏠#house|🏡#house with garden|🏢#office building|🏣#Japanese post office|🏤#post office|🏥#hospital|🏦#bank|🏨#hotel|🏩#love hotel|🏪#convenience store|🏫#school|🏬#department store|🏭#factory|🏯#Japanese castle|🏰#castle|💒#wedding|🗼#Tokyo tower|🗽#Statue of Liberty|⛪#church|🕌#mosque|🕍#synagogue|⛩️#shinto shrine|🕋#kaaba|⛲#fountain|⛺#tent|🌁#foggy|🌃#night with stars|🌄#sunrise over mountains|🌅#sunrise|🌆#cityscape at dusk|🌇#sunset|🌉#bridge at night|♨️#hot springs|🎠#carousel horse|🎡#ferris wheel|🎢#roller coaster|💈#barber pole|🎪#circus tent|🚂#locomotive|🚃#railway car|🚄#high-speed train|🚅#bullet train|🚆#train|🚇#metro|🚈#light rail|🚉#station|🚊#tram|🚝#monorail|🚞#mountain railway|🚋#tram car|🚌#bus|🚍#oncoming bus|🚎#trolleybus|🚐#minibus|🚑#ambulance|🚒#fire engine|🚓#police car|🚔#oncoming police car|🚕#taxi|🚖#oncoming taxi|🚗#automobile|🚘#oncoming automobile|🚙#sport utility vehicle|🚚#delivery truck|🚛#articulated lorry|🚜#tractor|🛵#motor scooter|🚲#bicycle|🛴#kick scooter|🚏#bus stop|⛽#fuel pump|🚨#police car light|🚥#horizontal traffic light|🚦#vertical traffic light|🛑#stop sign|🚧#construction|⚓#anchor|⛵#sailboat|🛶#canoe|🚤#speedboat|⛴️#ferry|🚢#ship|✈️#airplane|🛫#airplane departure|🛬#airplane arrival|💺#seat|🚁#helicopter|🚟#suspension railway|🚠#mountain cableway|🚡#aerial tramway|🚀#rocket|🛸#flying saucer|⌛#hourglass done|⏳#hourglass not done|⌚#watch|⏰#alarm clock|⏱️#stopwatch|⏲️#timer clock|🕛#twelve o’clock|🕧#twelve-thirty|🕐#one o’clock|🕜#one-thirty|🕑#two o’clock|🕝#two-thirty|🕒#three o’clock|🕞#three-thirty|🕓#four o’clock|🕟#four-thirty|🕔#five o’clock|🕠#five-thirty|🕕#six o’clock|🕡#six-thirty|🕖#seven o’clock|🕢#seven-thirty|🕗#eight o’clock|🕣#eight-thirty|🕘#nine o’clock|🕤#nine-thirty|🕙#ten o’clock|🕥#ten-thirty|🕚#eleven o’clock|🕦#eleven-thirty|🌑#new moon|🌒#waxing crescent moon|🌓#first quarter moon|🌔#waxing gibbous moon|🌕#full moon|🌖#waning gibbous moon|🌗#last quarter moon|🌘#waning crescent moon|🌙#crescent moon|🌚#new moon face|🌛#first quarter moon face|🌜#last quarter moon face|☀️#sun|🌝#full moon face|🌞#sun with face|⭐#star|🌟#glowing star|🌠#shooting star|🌌#milky way|☁️#cloud|⛅#sun behind cloud|⛈️#cloud with lightning and rain|🌀#cyclone|🌈#rainbow|🌂#closed umbrella|☂️#umbrella|☔#umbrella with rain drops|⛱️#umbrella on ground|⚡#high voltage|❄️#snowflake|☃️#snowman|⛄#snowman without snow|☄️#comet|🔥#fire|💧#droplet|🌊#water wave\", \"🎃#jack-o-lantern|🎄#Christmas tree|🎆#fireworks|🎇#sparkler|✨#sparkles|🎈#balloon|🎉#party popper|🎊#confetti ball|🎋#tanabata tree|🎍#pine decoration|🎎#Japanese dolls|🎏#carp streamer|🎐#wind chime|🎑#moon viewing ceremony|🎀#ribbon|🎁#wrapped gift|🎫#ticket|🏆#trophy|🏅#sports medal|🥇#1st place medal|🥈#2nd place medal|🥉#3rd place medal|⚽#soccer ball|⚾#baseball|🏀#basketball|🏐#volleyball|🏈#american football|🏉#rugby football|🎾#tennis|🎳#bowling|🏏#cricket game|🏑#field hockey|🏒#ice hockey|🏓#ping pong|🏸#badminton|🥊#boxing glove|🥋#martial arts uniform|🥅#goal net|⛳#flag in hole|⛸️#ice skate|🎣#fishing pole|🎽#running shirt|🎿#skis|🛷#sled|🥌#curling stone|🎯#direct hit|🎱#pool 8 ball|🔮#crystal ball|🎮#video game|🎰#slot machine|🎲#game die|♠️#spade suit|♥️#heart suit|♦️#diamond suit|♣️#club suit|🃏#joker|🀄#mahjong red dragon|🎴#flower playing cards|🎭#performing arts|🎨#artist palette\", \"👓#glasses|👔#necktie|👕#t-shirt|👖#jeans|🧣#scarf|🧤#gloves|🧥#coat|🧦#socks|👗#dress|👘#kimono|👙#bikini|👚#woman’s clothes|👛#purse|👜#handbag|👝#clutch bag|🎒#backpack|👞#man’s shoe|👟#running shoe|👠#high-heeled shoe|👡#woman’s sandal|👢#woman’s boot|👑#crown|👒#woman’s hat|🎩#top hat|🎓#graduation cap|🧢#billed cap|⛑️#rescue worker’s helmet|📿#prayer beads|💄#lipstick|💍#ring|💎#gem stone|🔇#muted speaker|🔈#speaker low volume|🔉#speaker medium volume|🔊#speaker high volume|📢#loudspeaker|📣#megaphone|📯#postal horn|🔔#bell|🔕#bell with slash|🎼#musical score|🎵#musical note|🎶#musical notes|🎤#microphone|🎧#headphone|📻#radio|🎷#saxophone|🎸#guitar|🎹#musical keyboard|🎺#trumpet|🎻#violin|🥁#drum|📱#mobile phone|📲#mobile phone with arrow|☎️#telephone|📞#telephone receiver|📟#pager|📠#fax machine|🔋#battery|🔌#electric plug|💻#laptop|⌨️#keyboard|💽#computer disk|💾#floppy disk|💿#optical disk|📀#dvd|🎥#movie camera|🎬#clapper board|📺#television|📷#camera|📸#camera with flash|📹#video camera|📼#videocassette|🔍#magnifying glass tilted left|🔎#magnifying glass tilted right|💡#light bulb|🔦#flashlight|🏮#red paper lantern|📔#notebook with decorative cover|📕#closed book|📖#open book|📗#green book|📘#blue book|📙#orange book|📚#books|📓#notebook|📒#ledger|📃#page with curl|📜#scroll|📄#page facing up|📰#newspaper|📑#bookmark tabs|🔖#bookmark|💰#money bag|💴#yen banknote|💵#dollar banknote|💶#euro banknote|💷#pound banknote|💸#money with wings|💳#credit card|💹#chart increasing with yen|✉️#envelope|📧#e-mail|📨#incoming envelope|📩#envelope with arrow|📤#outbox tray|📥#inbox tray|📦#package|📫#closed mailbox with raised flag|📪#closed mailbox with lowered flag|📬#open mailbox with raised flag|📭#open mailbox with lowered flag|📮#postbox|✏️#pencil|✒️#black nib|📝#memo|💼#briefcase|📁#file folder|📂#open file folder|📅#calendar|📆#tear-off calendar|📇#card index|📈#chart increasing|📉#chart decreasing|📊#bar chart|📋#clipboard|📌#pushpin|📍#round pushpin|📎#paperclip|📏#straight ruler|📐#triangular ruler|✂️#scissors|🔒#locked|🔓#unlocked|🔏#locked with pen|🔐#locked with key|🔑#key|🔨#hammer|⛏️#pick|⚒️#hammer and pick|⚔️#crossed swords|🔫#pistol|🏹#bow and arrow|🔧#wrench|🔩#nut and bolt|⚙️#gear|⚖️#balance scale|🔗#link|⛓️#chains|⚗️#alembic|🔬#microscope|🔭#telescope|📡#satellite antenna|💉#syringe|💊#pill|🚪#door|🚽#toilet|🚿#shower|🛁#bathtub|🛒#shopping cart|🚬#cigarette|⚰️#coffin|⚱️#funeral urn|🗿#moai\", \"🏧#ATM sign|🚮#litter in bin sign|🚰#potable water|♿#wheelchair symbol|🚹#men’s room|🚺#women’s room|🚻#restroom|🚼#baby symbol|🚾#water closet|🛂#passport control|🛃#customs|🛄#baggage claim|🛅#left luggage|⚠️#warning|🚸#children crossing|⛔#no entry|🚫#prohibited|🚳#no bicycles|🚭#no smoking|🚯#no littering|🚱#non-potable water|🚷#no pedestrians|📵#no mobile phones|🔞#no one under eighteen|☢️#radioactive|☣️#biohazard|⬆️#up arrow|↗️#up-right arrow|➡️#right arrow|↘️#down-right arrow|⬇️#down arrow|↙️#down-left arrow|⬅️#left arrow|↖️#up-left arrow|↕️#up-down arrow|↔️#left-right arrow|↩️#right arrow curving left|↪️#left arrow curving right|⤴️#right arrow curving up|⤵️#right arrow curving down|🔃#clockwise vertical arrows|🔄#counterclockwise arrows button|🔙#BACK arrow|🔚#END arrow|🔛#ON! arrow|🔜#SOON arrow|🔝#TOP arrow|🛐#place of worship|⚛️#atom symbol|✡️#star of David|☸️#wheel of dharma|☯️#yin yang|✝️#latin cross|☦️#orthodox cross|☪️#star and crescent|☮️#peace symbol|🕎#menorah|🔯#dotted six-pointed star|♈#Aries|♉#Taurus|♊#Gemini|♋#Cancer|♌#Leo|♍#Virgo|♎#Libra|♏#Scorpio|♐#Sagittarius|♑#Capricorn|♒#Aquarius|♓#Pisces|⛎#Ophiuchus|🔀#shuffle tracks button|🔁#repeat button|🔂#repeat single button|▶️#play button|⏩#fast-forward button|⏭️#next track button|⏯️#play or pause button|◀️#reverse button|⏪#fast reverse button|⏮️#last track button|🔼#upwards button|⏫#fast up button|🔽#downwards button|⏬#fast down button|⏸️#pause button|⏹️#stop button|⏺️#record button|⏏️#eject button|🎦#cinema|🔅#dim button|🔆#bright button|📶#antenna bars|📳#vibration mode|📴#mobile phone off|♀️#female sign|♂️#male sign|✖️#multiply|➕#plus|➖#minus|➗#divide|‼️#double exclamation mark|⁉️#exclamation question mark|❓#question mark|❔#white question mark|❕#white exclamation mark|❗#exclamation mark|〰️#wavy dash|💱#currency exchange|💲#heavy dollar sign|⚕️#medical symbol|♻️#recycling symbol|⚜️#fleur-de-lis|🔱#trident emblem|📛#name badge|🔰#Japanese symbol for beginner|⭕#hollow red circle|✅#check mark button|☑️#check box with check|✔️#check mark|❌#cross mark|❎#cross mark button|➰#curly loop|➿#double curly loop|〽️#part alternation mark|✳️#eight-spoked asterisk|✴️#eight-pointed star|❇️#sparkle|©️#copyright|®️#registered|™️#trade mark|🔟#keycap: 10|🔠#input latin uppercase|🔡#input latin lowercase|🔢#input numbers|🔣#input symbols|🔤#input latin letters|🆎#AB button (blood type)|🆑#CL button|🆒#COOL button|🆓#FREE button|ℹ️#information|🆔#ID button|Ⓜ️#circled M|🆕#NEW button|🆖#NG button|🆗#OK button|🆘#SOS button|🆙#UP! button|🆚#VS button|🈁#Japanese “here” button|🈶#Japanese “not free of charge” button|🈯#Japanese “reserved” button|🉐#Japanese “bargain” button|🈹#Japanese “discount” button|🈚#Japanese “free of charge” button|🈲#Japanese “prohibited” button|🉑#Japanese “acceptable” button|🈸#Japanese “application” button|🈴#Japanese “passing grade” button|🈳#Japanese “vacancy” button|㊗️#Japanese “congratulations” button|㊙️#Japanese “secret” button|🈺#Japanese “open for business” button|🈵#Japanese “no vacancy” button|🔴#red circle|🔵#blue circle|⚫#black circle|⚪#white circle|⬛#black large square|⬜#white large square|◼️#black medium square|◻️#white medium square|◾#black medium-small square|◽#white medium-small square|▪️#black small square|▫️#white small square|🔶#large orange diamond|🔷#large blue diamond|🔸#small orange diamond|🔹#small blue diamond|🔺#red triangle pointed up|🔻#red triangle pointed down|💠#diamond with a dot|🔘#radio button|🔳#white square button|🔲#black square button\"];\n  var emojidata = null;\n\n  function MakeEmojiData() {\n    if (emojidata) return;\n    emojidata = [];\n\n    for (var groupindex = 0; groupindex < groupnames.length; groupindex++) {\n      var emojiitems = [];\n      var emojigroup = {\n        index: groupindex,\n        name: groupnames[groupindex],\n        items: emojiitems\n      };\n      var emojiarr = emojistrs[groupindex].split('|');\n\n      for (var ei = 0; ei < emojiarr.length; ei++) {\n        var emojistr = emojiarr[ei];\n        var pair = emojistr.split('#');\n        emojiitems.push({\n          emoji: pair[0],\n          keyword: pair[1]\n        });\n      }\n\n      emojidata.push(emojigroup);\n    } //console.log(emojidata);\n\n  }\n\n  var obj = this;\n  var config, editor;\n  obj.PluginName = \"InsertEmoji\";\n\n  obj.InitConfig = function (argconfig) {\n    config = argconfig;\n  };\n\n  obj.InitEditor = function (argeditor) {\n    editor = argeditor;\n\n    editor.toolbarFactoryMap[\"insertemoji\"] = function (cmd) {\n      return editor.createToolbarItemDropDownPanel(cmd, function (panel) {\n        MakeEmojiData();\n        panel.style.width = \"360px\";\n        panel.style.height = \"420px\";\n        panel.style.display = \"flex\";\n        panel.style.flexDirection = \"column\";\n\n        panel.onclick = function (e) {\n          if (e.target.nodeName == \"GSPAN\") {\n            editor.closeCurrentPopup();\n            var htmlcode = e.target.getAttribute(\"htmlcode\");\n            console.log(\"insert emoji\", htmlcode);\n            editor.insertHTML(htmlcode);\n            editor.collapse(false);\n            editor.focus();\n          }\n        };\n\n        var selecteditem = null;\n        var toselectitem = null;\n\n        function clear_selecteditem() {\n          if (selecteditem != null) {\n            selecteditem.style.backgroundColor = \"\";\n            selecteditem = null;\n          }\n        }\n\n        function set_selecteditem() {\n          clear_selecteditem();\n          selecteditem = toselectitem;\n          selecteditem.style.backgroundColor = \"#e6e6e6\";\n          toselectitem = null;\n        }\n\n        var tid_sel = 0;\n\n        panel.onmouseover = function (e) {\n          for (var node = e.target; node != panel; node = node.parentNode) {\n            if (node.nodeName == \"GITEM\") {\n              if (node == toselectitem) return;\n              toselectitem = node;\n              clearTimeout(tid_sel);\n              tid_sel = setTimeout(set_selecteditem, 10);\n              return;\n            }\n          }\n        };\n\n        panel.onmouseout = function () {\n          clearTimeout(tid_sel);\n          tid_sel = setTimeout(clear_selecteditem, 10);\n        };\n\n        var searchbar = __Append(panel, \"label\", \"margin:5px;position:relative;\");\n\n        searchbar.setAttribute(\"id\", \"emojis_searchbar\");\n\n        var searchbox = __Append(searchbar, \"input\", \"width:100%;padding:5px 20px;border:solid 1px #ccc;border-radius:5px;\");\n\n        searchbox.setAttribute(\"placeholder\", editor.getLangText(\"searchemojis\"));\n        var tid_key = 0;\n\n        searchbox.onchange = searchbox.onkeyup = searchbox.onkeypress = searchbox.onpaste = function () {\n          clearTimeout(tid_key);\n          tid_key = setTimeout(show_result, 100);\n        };\n\n        function show_result() {\n          var keyword = searchbox.value.trim().toLowerCase();\n\n          if (!keyword) {\n            tabpanel.style.display = grouppanel.style.display = \"\";\n            resultpanel.style.display = \"none\";\n            return;\n          }\n\n          tabpanel.style.display = grouppanel.style.display = \"none\";\n          resultpanel.style.display = \"flex\";\n          resultpanel.innerHTML = \"\";\n\n          var resultline = __Append(resultpanel, \"div\", \"width:100%;padding:3px;margin-top:5px;color:darkblue;text-align:center;\");\n\n          var itemindex = 0;\n\n          for (var gi = 0; gi < emojidata.length; gi++) {\n            var group = emojidata[gi];\n\n            for (var ii = 0; ii < group.items.length; ii++) {\n              var item = group.items[ii];\n              if (!item.keyword || item.keyword.indexOf(keyword) == -1) continue;\n              itemindex++; //if (itemindex > 20)break;\n\n              var gitem = __Append(resultpanel, \"gitem\", \"width:32px;height:32px;margin:2px\", \"rte-flex-column-center\");\n\n              var gspan = __Append(gitem, \"gspan\", \"\");\n\n              var htmlcode = CharToHTMLCode(item.emoji);\n              gspan.setAttribute(\"title\", item.emoji + \" \" + item.keyword);\n              gspan.setAttribute(\"htmlcode\", htmlcode);\n              gspan.innerHTML = htmlcode;\n            }\n          }\n\n          resultline.innerText = itemindex + \" items\";\n        }\n\n        searchbox.focus();\n        panel.setAttribute(\"id\", \"emoji-picker\");\n\n        var tabpanel = __Append(panel, \"div\");\n\n        var resultpanel = __Append(panel, \"div\", \"display:none;flex-direction:row;flex-wrap:wrap;overflow-y:scroll;padding-bottom:55px\");\n\n        var grouppanel = __Append(panel, \"div\", \"overflow-y:scroll;padding-bottom:55px;flex:999\");\n\n        var groupdivs = [];\n\n        for (var gi = 0; gi < emojidata.length; gi++) {\n          var group = emojidata[gi];\n\n          var gdiv = __Append(grouppanel, \"div\", \"padding:3px;margin-top:5px;color:darkblue;\");\n\n          groupdivs.push(gdiv);\n          gdiv.innerText = group.name[0].toUpperCase() + group.name.substring(1);\n          gdiv = __Append(grouppanel, \"div\", \"display:flex;flex-direction:row;flex-wrap:wrap;\");\n\n          for (var itemindex = 0; itemindex < group.items.length; itemindex++) {\n            var item = group.items[itemindex]; //if (itemindex > 20)break;\n\n            var gitem = __Append(gdiv, \"gitem\", \"width:32px;height:32px;margin:2px\", \"rte-flex-column-center\");\n\n            var gspan = __Append(gitem, \"gspan\", \"\");\n\n            var htmlcode = CharToHTMLCode(item.emoji);\n            gspan.setAttribute(\"title\", item.emoji + \" \" + item.keyword);\n            gspan.setAttribute(\"htmlcode\", htmlcode);\n            gspan.innerHTML = htmlcode;\n          }\n        }\n\n        var tabui = __Append(tabpanel, \"rte-tabui\");\n\n        tabui.setAttribute(\"id\", \"emoji-picker\");\n\n        var tabuitoolbar = __Append(tabui, \"rte-tabui-toolbar\");\n\n        var tabuibtns = [];\n\n        function CreateTabBtn(group) {\n          var btn = __Append(tabuitoolbar, \"rte-tabui-toolbar-button\", \"width:32px;text-align:center;margin:4px\");\n\n          tabuibtns.push(btn);\n          btn.setAttribute(\"title\", group.name);\n          btn.innerHTML = group.items[0].emoji;\n\n          btn.onclick = function () {\n            grouppanel.scrollTop = groupdivs[group.index].getBoundingClientRect().top - grouppanel.getBoundingClientRect().top + grouppanel.scrollTop;\n            grouppanel.onscroll();\n          };\n\n          btn.group = group;\n        }\n\n        for (var gi = 0; gi < emojidata.length; gi++) {\n          var group = emojidata[gi];\n          CreateTabBtn(group);\n        }\n\n        var lastactivebtn = null;\n\n        grouppanel.onscroll = function () {\n          var ptop = grouppanel.getBoundingClientRect().top;\n          console.log(ptop);\n          if (lastactivebtn) lastactivebtn.className = \"\";\n\n          for (var bi = 0; bi < tabuibtns.length; bi++) {\n            var btn = tabuibtns[bi];\n            var gdiv = groupdivs[btn.group.index];\n\n            if (gdiv.getBoundingClientRect().top > ptop) {\n              lastactivebtn = tabuibtns[btn.group.index - 1] || btn;\n              lastactivebtn.className = \"rte-ui-active\";\n              return;\n            }\n          }\n\n          lastactivebtn = tabuibtns[tabuibtns.length - 1];\n          lastactivebtn.className = \"rte-ui-active\";\n        };\n\n        grouppanel.onscroll();\n      });\n    };\n  };\n\n  function __Append(parent, tagname, csstext, cssclass) {\n    var tag = parent.ownerDocument.createElement(tagname);\n    if (csstext) tag.style.cssText = csstext;\n    if (cssclass) tag.className = cssclass;\n    parent.appendChild(tag);\n    return tag;\n  }\n}\n\nRTE_DefaultConfig.plugin_insertgallery = RTE_Plugin_InsertGallery;\n\nfunction RTE_Plugin_InsertGallery() {\n  var obj = this;\n  var config, editor;\n  obj.PluginName = \"InsertGallery\";\n\n  obj.InitConfig = function (argconfig) {\n    config = argconfig;\n  };\n\n  obj.InitEditor = function (argeditor) {\n    editor = argeditor;\n    editor.attachEvent(\"exec_command_insertgallery\", function (state, cmd, value) {\n      state.returnValue = true;\n      obj.DoInsertGallery();\n    });\n  };\n\n  function __Append(parent, tagname, csstext, cssclass) {\n    var tag = parent.ownerDocument.createElement(tagname);\n    if (csstext) tag.style.cssText = csstext;\n    if (cssclass) tag.className = cssclass;\n    parent.appendChild(tag);\n    return tag;\n  }\n\n  obj.DoInsertGallery = function () {\n    var dialoginner = editor.createDialog(editor.getLangText(\"insertgallerytitle\"), \"rte-dialog-insertgallery\");\n\n    var scrollpanel = __Append(dialoginner, \"rte-insertgallery-scrollpanel\", \"overflow-y:auto;padding-bottom:32px;\");\n\n    var container = __Append(scrollpanel, \"rte-insertgallery-container\", \"display:flex;flex-wrap:wrap;\");\n\n    container.focus(); //focus to let ESC key close dialog\n\n    function CreateDiv(item) {\n      var url, text;\n\n      if (typeof item == \"string\") {\n        url = item;\n      } else if (item instanceof Array) {\n        url = item[0];\n        text = item[1];\n      } else if (item && item.url) {\n        url = item.url;\n        text = item.text;\n      } else {\n        return;\n      }\n\n      var divitem = __Append(container, \"rte-insertgallery-image-item\", \"cursor:pointer;width:128px;height:128px;margin:12px;box-shadow:0 0 8px #ccc;display:flex;align-items:center;justify-content:center;\");\n\n      var img = __Append(divitem, \"img\", \"max-width:90%;max-height:90%;\");\n\n      img.src = url;\n\n      divitem.onclick = function () {\n        editor.insertImageByUrl(url);\n        dialoginner.close();\n      };\n    }\n\n    for (var i = 0; i < config.galleryImages.length; i++) {\n      var item = config.galleryImages[i];\n      CreateDiv(item);\n    }\n  };\n}\n\nRTE_DefaultConfig.plugin_inserttemplate = RTE_Plugin_InsertTemplate;\n\nfunction RTE_Plugin_InsertTemplate() {\n  var obj = this;\n  var config, editor;\n  obj.PluginName = \"InsertTemplate\";\n\n  obj.InitConfig = function (argconfig) {\n    config = argconfig;\n  };\n\n  obj.InitEditor = function (argeditor) {\n    editor = argeditor;\n    editor.attachEvent(\"exec_command_inserttemplate\", function (state, cmd, value) {\n      state.returnValue = true;\n      obj.DoInsertTemplate();\n    });\n  };\n\n  function __Append(parent, tagname, csstext, cssclass) {\n    var tag = parent.ownerDocument.createElement(tagname);\n    if (csstext) tag.style.cssText = csstext;\n    if (cssclass) tag.className = cssclass;\n    parent.appendChild(tag);\n    return tag;\n  }\n\n  obj.DoInsertTemplate = function () {\n    var dialoginner = editor.createDialog(editor.getLangText(\"inserttemplatetitle\"), \"rte-dialog-inserttemplate\");\n\n    var scrollpanel = __Append(dialoginner, \"rte-inserttemplate-scrollpanel\", \"overflow-y:auto;padding-bottom:32px;\");\n\n    var container = __Append(scrollpanel, \"rte-inserttemplate-container\", \"display:flex;flex-wrap:wrap;\");\n\n    container.focus(); //focus to let ESC key close dialog\n\n    function CreateDiv(item) {\n      var text = item[0];\n      var html = item[1];\n      console.log(item, text, html);\n\n      var divitem = __Append(container, \"rte-inserttemplate-image-item\", \"cursor:pointer;width:256px;height:256px;margin:12px;box-shadow:0 0 8px #ccc;display:flex;align-items:center;justify-content:center;\");\n\n      var div = __Append(divitem, \"div\", \"max-width:90%;max-height:90%;overflow:auto;\");\n\n      var innerdiv = __Append(div, \"div\");\n\n      innerdiv.innerHTML = html;\n      div.title = text;\n      var scale = Math.min(200 / div.scrollWidth, 200 / div.scrollHeight);\n\n      if (scale < 1) {\n        var tx, ty;\n        tx = ty = (Math.max(div.scrollWidth, div.scrollHeight) - 200) / 2;\n        innerdiv.style.transform = \"scale(\" + scale + \") translate(-\" + tx + \"px,-\" + ty + \"px)\";\n        div.style.overflow = \"hidden\";\n      }\n\n      divitem.onclick = function () {\n        editor.setHTMLCode(html);\n        dialoginner.close();\n      };\n    }\n\n    for (var i = 0; i < config.htmlTemplates.length; i++) {\n      var item = config.htmlTemplates[i];\n      CreateDiv(item);\n    }\n  };\n} //END of all_plugins.js//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/all_plugins.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/all_plugins.js"]();
/******/ 	
/******/ })()
;